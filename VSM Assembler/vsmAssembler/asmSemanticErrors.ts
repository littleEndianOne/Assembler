import { IError } from "../../Utility";

//Enum of semantic errors generated by the assembler.
export enum semanticErrors {
    outOfRangeForAddress8,
    outOfRangeForAddress16,
    lableAlreadyExists,
    unresolvedReference,
    unknownOpcode,
    argCountMismatch,
    argTypeMismatch,    
    stringSizeOverflow,
    outOfRange
}

//Tags are within curly brackets {tag describer}. They will be replaced with values when the message is generated.
export let semanticErrorMsgTemplates: IError = {
    [semanticErrors.outOfRangeForAddress8]: "The varaible address <address> is out of range for a 8 bit address",
    [semanticErrors.outOfRangeForAddress16]: "The code address <address> is out of range for a 16 bit address",
    [semanticErrors.lableAlreadyExists]: "The lable <lable> has already been defined",
    [semanticErrors.unresolvedReference]: "The lable <lable> could not be resolved",
    [semanticErrors.unknownOpcode]: "The opcode <opcode> is unknown",
    [semanticErrors.argCountMismatch]: "The number of arguments does not match the instructions definition",
    [semanticErrors.argTypeMismatch]: "The argument type does not match the instructions definition",
    [semanticErrors.stringSizeOverflow]: "The string literal is longer than 255 characters",
    [semanticErrors.outOfRange]: "The value <value> is out of range for the data type",
}